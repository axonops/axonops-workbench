name: "Linux: Build and Pack (ARM64)"

on:
  workflow_dispatch:

jobs:
  Linux:
    runs-on: [self-hosted, linux, ARM64]

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Start with CQLSH tool
        run: echo ""

      - name: Switch to cqlsh branch
        uses: actions/checkout@v2
        with:
          ref: cqlsh

      - name: Setup Python v3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Build CQLSH v6.0.0
        run: |
          cd "v6.0.0-ACv4.0.7"
          ls
          pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          pip install -r requirements.txt
          export PATH="$PWD/venv/bin:$PATH"
          pyinstaller --noconfirm --clean --noupx --onefile cqlsh.py

      - name: Build CQLSH v6.1.0
        run: |
          cd "v6.1.0-ACv4.1.0"
          ls
          pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          pip install -r requirements.txt
          export PATH="$PWD/venv/bin:$PATH"
          pyinstaller --noconfirm --clean --noupx --onefile cqlsh.py

      - name: Rename artifacts
        run: |
          mkdir CQLSH_ALL
          mv v6.0.0-ACv4.0.7/dist/cqlsh CQLSH_ALL/cqlsh-407
          mv v6.1.0-ACv4.1.0/dist/cqlsh CQLSH_ALL/cqlsh-410

      - name: Save artifacts to be used next
        run: |
          mv CQLSH_ALL ~/

      - name: Switch to keys_generator branch
        uses: actions/checkout@v2
        with:
          ref: keys_generator

      - name: Build Keys Generator Tool
        run: |
          ls
          pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          pip install -r requirements.txt
          export PATH="$PWD/venv/bin:$PATH"
          pyinstaller --noconfirm --clean --noupx --onefile keys_generator.py

      - name: Save artifact to be used next
        run: |
          mv dist/*keys_generator* ~/CQLSH_ALL

      - name: Start with AxonOps Developer Workbench
        run: echo ""

      - name: Switch to ${{ steps.extract_branch.outputs.branch }} branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Setup Node.js v16.20.2
        uses: actions/setup-node@v2
        with:
          node-version: 16.20.2

      - name: Install AxonOps Developer Workbench dependencies
        run: |
          npm i

      - name: Move CQLSH to bin folder
        run: |
          mkdir -p ${{ steps.extract_branch.outputs.branch }}/bin
          mv  -v ~/CQLSH_ALL/* ${{ steps.extract_branch.outputs.branch }}/bin

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2

      - name: Pack AxonOps Developer Workbench for Linux
        run: |
          if [ "$(uname -m)" == "aarch64" ]; then
            sudo apt-get -y install ruby
            gem install dotenv -v 2.8.1
            gem instal fpm
            export USE_SYSTEM_FPM=true
          fi

          npm run deb rpm snap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
