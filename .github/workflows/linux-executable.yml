name: Build Linux AMD64

on:
  release:
    types: [published]

  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build on ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: [self-hosted, linux, X64]
            target: Linux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Starting build
        run: |
          echo "running build"
          uname -a
          hostname
          date

      - name: Download CQLSH prebuilt binaries
        run: |
          mkdir -p main/bin
          if [[ "$(uname -s)" =~ "MINGW64" ]]; then
            curl -L ${GITHUB_URL}/cqlsh-410-$(uname -s)-$(uname -m).exe > main/bin/cqlsh-410.exe
            curl -L ${GITHUB_URL}/cqlsh-407-$(uname -s)-$(uname -m).exe > main/bin/cqlsh-407.exe
            curl -L ${GITHUB_URL}/keys_generator-$(uname -s)-$(uname -m).exe > main/bin/keys_generator.exe
          else
            curl -L ${GITHUB_URL}/cqlsh-410-$(uname -s)-$(uname -m) > main/bin/cqlsh-410
            curl -L ${GITHUB_URL}/cqlsh-407-$(uname -s)-$(uname -m) > main/bin/cqlsh-407
            curl -L ${GITHUB_URL}/keys_generator-$(uname -s)-$(uname -m) > main/bin/keys_generator
            chmod 755 main/bin/*
          fi
        env:
          GITHUB_URL: https://github.com/axonops/axonops-workbench-cqlsh/releases/download/0.0.1-beta2

      - name: Setup Python v3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install python dependencies
        run:  pip3 install -r requirements.txt

      - name: Setup Node.js v16.20.2
        uses: actions/setup-node@v4
        with:
          node-version: 16.20.2

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Get credits and add them to the database
        run: |
          cd get_credits
          npm cache clean --force
          npm i
          npm rebuild
          node get_credits.js
        
      - name: Install AxonOps Developer Workbench dependencies
        run: npm i

      # - name: Install Snapcraft
      #   uses: samuelmeuli/action-snapcraft@v2
      #   if: ${{ runner.os != 'Windows' }}

      - name: Pack AxonOps Developer Workbench for Linux
        run: |
          if [ "$(uname -m)" == "aarch64" ] && [ "$(uname -s)" == "Linux" ]; then
            sudo apt-get -y install ruby
            sudo gem install dotenv -v 2.8.1
            sudo gem instal fpm
            export USE_SYSTEM_FPM=true
          fi

          if [ "$(uname -s )" == "Darwin" ] && [ "$(uname -m)" == "arm64" ]; then
            npm run mac:arm64
          elif [ "$(uname -s )" == "Darwin" ] && [ "$(uname -m)" == "x86_64" ]; then
            npm run mac
          fi
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          if [ "$(uname -s )" == "Linux" ]; then
            npm run linux
          fi
          if [[ "$(uname -s)" =~ "MINGW64" ]]; then
            unset CSC_KEY_PASSWORD
            unset CSC_LINK
            npm run win
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.zip
            dist/*.pkg
            dist/*.dmg
            dist/*.deb
            dist/*.rpm
            dist/*.exe
            dist/*.tar.gz
            dist/*.nsis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
