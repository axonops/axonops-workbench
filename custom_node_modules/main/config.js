/**
 * Module to handle the `app-config.cfg` read and write processes
 * It's also used in the renderer thread
 *
 *
 * Import modules, and define constants
 *
 * Implements a configuration file parser
 * The structure is very similar to the Windows `.ini` file
 */
const fs = require('fs');

// Define your default configuration as a string
const defaultConfig = `
[security]
contentProtection=true
loggingEnabled=false

[ui]
theme=light
language=en

[limit]
sandbox=1
cqlsh=10

[sshtunnel]
readyTimeout=60000
forwardTimeout=60000
`;

var UserDataDir = process.cwd()
const { ipcRenderer } = require('electron')
if (ipcRenderer !== undefined) {
  ipcRenderer.invoke('get-user-data').then((value) => {
    UserDataDir = value
    console.log(`Config: User data path: ${value}`)
  })
} else if (typeof global.UserDataDir !== 'undefined') {
  UserDataDir = global.UserDataDir
} else {
  const App = require('electron').app
  UserDataDir = App.getPath('electron')
}

ConfigParser = require('configparser'),
  // Define `app-config.json` file path
  AppConfigPath = Path.join(UserDataDir, 'app-config.cfg')

/**
 * Get the app's configuration properties
 *
 * @Parameters:
 * {object} `callback` function that will be triggered with passing the final configuration object
 *
 * @Return: {object} either `null` or the configuration object
 */
//let getConfig = async () => {
let getConfig = async (callback) => {
  try {
    // Add log about this process
    try {
      addLog(`Retrieve the app's configuration from 'app-config.cfg' file`, 'process')
    } catch (e) {}

    if (!fs.existsSync(AppConfigPath)) {
      fs.writeFileSync(AppConfigPath, defaultConfig)
    }

    let configObject = new ConfigParser()

    configObject.read(AppConfigPath)

    // Call the `callback` function with passing the configuration object
    return callback(configObject)
  } catch (e) {
    try {
      // If the error is a number then don't log the error
      if (!isNaN(parseInt(e.toString())))
        throw 0

      addLog(`Error in process configuration. Details: ${e}`, 'error')
    } catch (e) {}

    // If any error has occurred then call the `callback` function with passing `null` to indicate a failure
    return callback(null)
  }
}

/**
 * Set the given configuration object content in the app's config file
 *
 * @Parameters:
 * {object} `configObject` the configuration object
 */
let setConfig = (configObject) => {
  // Add log about this process
  try {
    addLog(`Write/update the app's configuration to file 'app-config.cfg'`, 'process')
  } catch (e) {}

  // Attempt to set/write the given configuration object in the app's config file
  try {
    configObject.write(AppConfigPath)
  } catch (e) {
    try {
      // If the error is a number then don't log the error
      if (!isNaN(parseInt(e.toString())))
        throw 0

      addLog(`Error in process configuration. Details: ${e}`, 'error')
    } catch (e) {}
  }
}

module.exports = {
  getConfig,
  setConfig
}