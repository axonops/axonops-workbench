/**
 * Module to handle the logging actions in the app overall
 * There's a `constructing` and `add log` functions
 *
 * Import the Node.js OS module
 * Used for operating system-related utilities and properties
 */
const OS = require('os')

// Define the `logging` class which will present the logging system
class Logging {
  /**
   * Data is:
   * { date, id }
   */
  constructor(data) {
    var logsDir = './data/logs'

    if (process.platform === 'darwin') {
      logsDir = Path.join(process.env.HOME, '/Library/Logs/AxonOpsCassandra')
    } else if ((process.platform === 'win32') && (process.env.APPDATA)) {
      logsDir = Path.join(process.env.APPDATA, '/AxonOpsCassandra/Logs')
    } else {
      logsDir = Path.join(process.env.HOME, '/.config/AxonOpsCassandra/Logs')
    }

    // Create the logs directory if it doesn't exist
    if (!FS.existsSync(logsDir)) {
      try {
        FS.mkdirSync(logsDir, { recursive: true });
        console.log(`Created logs directory: ${logsDir}`);
      } catch (err) {
        console.error(`Error creating logs directory: ${err.message}`);
      }
    }

    // Define the logging files folder's path
    this.loggingFilesPath = logsDir

    // Define the current logging session's file's path
    this.loggingSessionFile = Path.join(this.loggingFilesPath, `${this.formatTimestamp(data.date, true).replace(/\s+/gm, '_')}-${data.id}.log`)

    // Create the logging session's file
    setTimeout(() => {
      try {
        FS.writeFileSync(this.loggingSessionFile, '')
      } catch (e) {}
    }, 100)
  }

  /**
   * Add a log text
   * Data is:
   * { date, log }
   */
  async addLog(data) {
    // Manipulate the passed log's type
    data.type = `${data.type}`.toUpperCase()

    // Attempt to append the log line
    try {
      await FS.appendFileSync(this.loggingSessionFile, `[${this.formatTimestamp(data.date)} ${data.type}] ${data.log}` + OS.EOL)
    } catch (e) {}
  }

  /**
   * Format a given timestamp to readable text
   *
   * @Parameters:
   * {integer} `timestamp` the timestamp value to be formatted
   * {boolean} `?isSecondFormat` return the second format `Year-Month-Day Hours:Mintues:Seconds`
   *
   * @Return: {string} formatted timestamp `Day-Month-Year Hours:Mintues:Seconds`
   */
  formatTimestamp(timestamp, isSecondFormat = false) {
    // Define the final result to be returned
    let format = ''

    try {
      // Get the date object based on the given timestamp, and get the year, month, and day of that timestamp
      let date = new Date(timestamp),
        year = date.getUTCFullYear(),
        month = date.getUTCMonth(),
        day = date.getUTCDate()

      // Manipulate month and day values; by adding `0` to what is less than `10`, and normalize the month's value
      month = month < 1 ? 1 : ((month > 12) ? 12 : (++month))
      month = month < 10 ? `0${month}` : month
      day = day < 10 ? `0${day}` : day

      // Get left hours, minutes, and seconds in the given timestamp
      let hours = date.getHours(),
        mintues = date.getMinutes(),
        seconds = date.getSeconds()

      // Manipulate hours, minutes, and seconds values; by adding `0` to what is less than `10`
      hours = hours < 10 ? `0${hours}` : hours
      mintues = mintues < 10 ? `0${mintues}` : mintues
      seconds = seconds < 10 ? `0${seconds}` : seconds

      // Define the default format
      format = `${day}-${month}-${year} ${hours}:${mintues}:${seconds}`

      // If it's required to adopt the second format
      if (isSecondFormat)
        format = `${year}-${month}-${day} ${hours}:${mintues}:${seconds}`
    } catch (e) {}

    // Return the human-readable result
    return format
  }
}

module.exports = {
  Logging
}
