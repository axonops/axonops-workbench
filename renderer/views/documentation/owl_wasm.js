let wasm;const heap=new Array(32).fill(void 0);heap.push(void 0,null,!0,!1);function getObject(idx){return heap[idx]}let heap_next=heap.length;function dropObject(idx){idx<36||(heap[idx]=heap_next,heap_next=idx)}function takeObject(idx){const ret=getObject(idx);return dropObject(idx),ret}let cachedTextDecoder=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});cachedTextDecoder.decode();let cachegetUint8Memory0=null;function getUint8Memory0(){return(cachegetUint8Memory0===null||cachegetUint8Memory0.buffer!==wasm.memory.buffer)&&(cachegetUint8Memory0=new Uint8Array(wasm.memory.buffer)),cachegetUint8Memory0}function getStringFromWasm0(ptr,len){return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr,ptr+len))}function addHeapObject(obj){heap_next===heap.length&&heap.push(heap.length+1);const idx=heap_next;return heap_next=heap[idx],heap[idx]=obj,idx}function debugString(val){const type=typeof val;if(type=="number"||type=="boolean"||val==null)return`${val}`;if(type=="string")return`"${val}"`;if(type=="symbol"){const description=val.description;return description==null?"Symbol":`Symbol(${description})`}if(type=="function"){const name=val.name;return typeof name=="string"&&name.length>0?`Function(${name})`:"Function"}if(Array.isArray(val)){const length=val.length;let debug="[";length>0&&(debug+=debugString(val[0]));for(let i=1;i<length;i++)debug+=", "+debugString(val[i]);return debug+="]",debug}const builtInMatches=/\[object ([^\]]+)\]/.exec(toString.call(val));let className;if(builtInMatches.length>1)className=builtInMatches[1];else return toString.call(val);if(className=="Object")try{return"Object("+JSON.stringify(val)+")"}catch{return"Object"}return val instanceof Error?`${val.name}: ${val.message}
${val.stack}`:className}let WASM_VECTOR_LEN=0,cachedTextEncoder=new TextEncoder("utf-8");const encodeString=typeof cachedTextEncoder.encodeInto=="function"?function(arg,view){return cachedTextEncoder.encodeInto(arg,view)}:function(arg,view){const buf=cachedTextEncoder.encode(arg);return view.set(buf),{read:arg.length,written:buf.length}};function passStringToWasm0(arg,malloc,realloc){if(realloc===void 0){const buf=cachedTextEncoder.encode(arg),ptr2=malloc(buf.length);return getUint8Memory0().subarray(ptr2,ptr2+buf.length).set(buf),WASM_VECTOR_LEN=buf.length,ptr2}let len=arg.length,ptr=malloc(len);const mem=getUint8Memory0();let offset=0;for(;offset<len;offset++){const code=arg.charCodeAt(offset);if(code>127)break;mem[ptr+offset]=code}if(offset!==len){offset!==0&&(arg=arg.slice(offset)),ptr=realloc(ptr,len,len=offset+arg.length*3);const view=getUint8Memory0().subarray(ptr+offset,ptr+len);offset+=encodeString(arg,view).written}return WASM_VECTOR_LEN=offset,ptr}let cachegetInt32Memory0=null;function getInt32Memory0(){return(cachegetInt32Memory0===null||cachegetInt32Memory0.buffer!==wasm.memory.buffer)&&(cachegetInt32Memory0=new Int32Array(wasm.memory.buffer)),cachegetInt32Memory0}export function main(){wasm.main()}export function setup(input){var ptr0=passStringToWasm0(input,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN,ret=wasm.setup(ptr0,len0);return FTSInstance.__wrap(ret)}function _assertClass(instance,klass){if(!(instance instanceof klass))throw new Error(`expected instance of ${klass.name}`);return instance.ptr}export function search(instance,term){_assertClass(instance,FTSInstance);var ptr0=passStringToWasm0(term,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN,ret=wasm.search(instance.ptr,ptr0,len0);return takeObject(ret)}function handleError(f){return function(){try{return f.apply(this,arguments)}catch(e){wasm.__wbindgen_exn_store(addHeapObject(e))}}}export class FTSInstance{static __wrap(ptr){const obj=Object.create(FTSInstance.prototype);return obj.ptr=ptr,obj}__destroy_into_raw(){const ptr=this.ptr;return this.ptr=0,ptr}free(){const ptr=this.__destroy_into_raw();wasm.__wbg_ftsinstance_free(ptr)}}async function load(module,imports){if(typeof Response=="function"&&module instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(module,imports)}catch(e){if(module.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e);else throw e}const bytes=await module.arrayBuffer();return await WebAssembly.instantiate(bytes,imports)}else{const instance=await WebAssembly.instantiate(module,imports);return instance instanceof WebAssembly.Instance?{instance,module}:instance}}async function init(input){typeof input=="undefined"&&(input=new URL("owl_wasm_bg.wasm",import.meta.url));const imports={};imports.wbg={},imports.wbg.__wbindgen_object_drop_ref=function(arg0){takeObject(arg0)},imports.wbg.__wbindgen_string_new=function(arg0,arg1){var ret=getStringFromWasm0(arg0,arg1);return addHeapObject(ret)},imports.wbg.__wbindgen_number_new=function(arg0){var ret=arg0;return addHeapObject(ret)},imports.wbg.__wbg_new_59cb74e423758ede=function(){var ret=new Error;return addHeapObject(ret)},imports.wbg.__wbg_stack_558ba5917b466edd=function(arg0,arg1){var ret=getObject(arg1).stack,ptr0=passStringToWasm0(ret,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN;getInt32Memory0()[arg0/4+1]=len0,getInt32Memory0()[arg0/4+0]=ptr0},imports.wbg.__wbg_error_4bb6c2a97407129a=function(arg0,arg1){try{console.error(getStringFromWasm0(arg0,arg1))}finally{wasm.__wbindgen_free(arg0,arg1)}},imports.wbg.__wbg_new_8528c110a833413f=function(){var ret=new Array;return addHeapObject(ret)},imports.wbg.__wbg_push_17a514d8ab666103=function(arg0,arg1){var ret=getObject(arg0).push(getObject(arg1));return ret},imports.wbg.__wbg_new_d14bf16e62c6b3d5=function(){var ret=new Object;return addHeapObject(ret)},imports.wbg.__wbg_set_61642586f7156f4a=handleError(function(arg0,arg1,arg2){var ret=Reflect.set(getObject(arg0),getObject(arg1),getObject(arg2));return ret}),imports.wbg.__wbindgen_debug_string=function(arg0,arg1){var ret=debugString(getObject(arg1)),ptr0=passStringToWasm0(ret,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN;getInt32Memory0()[arg0/4+1]=len0,getInt32Memory0()[arg0/4+0]=ptr0},imports.wbg.__wbindgen_throw=function(arg0,arg1){throw new Error(getStringFromWasm0(arg0,arg1))},(typeof input=="string"||typeof Request=="function"&&input instanceof Request||typeof URL=="function"&&input instanceof URL)&&(input=fetch(input));const{instance,module}=await load(await input,imports);return wasm=instance.exports,init.__wbindgen_wasm_module=module,wasm.__wbindgen_start(),wasm}export default init;
